{"body":"Example\r\n-------\r\n\r\nEssence is designed to be really easy to use.\r\nUsing the main class of the library, you can retrieve informations in just those few lines:\r\n\r\n```php\r\n<?php\r\n\r\nrequire_once 'path/to/essence/bootstrap.php';\r\n\r\n$Essence = new fg\\Essence\\Essence( );\r\n\r\n$Media = $Essence->embed( 'http://www.youtube.com/watch?v=39e3KYAmXK4' );\r\n\r\nif ( $Media ) {\r\n\t// That's all, you're good to go !\r\n}\r\n\r\n?>\r\n```\r\n\r\nThen, just do anything you want with the data:\r\n\r\n```php\r\n<article>\r\n\t<header>\r\n\t\t<h1><?php echo $Media->title; ?></h1>\r\n\t\t<p>By <?php echo $Media->authorName; ?></p>\r\n\t</header>\r\n\r\n\t<div class=\"player\">\r\n\t\t<?php echo $Media->html; ?>\r\n\t</div>\r\n</article>\r\n```\r\n\r\nWhat you get\r\n------------\r\n\r\nWith Essence, you will mainly interact with Media objects.\r\nMedia is a simple container for all the informations that are fetched from an URL.\r\n\r\nHere is the default properties it provides:\r\n\r\n* type\r\n* version\r\n* url\r\n* title\r\n* description\r\n* authorName\r\n* authorUrl\r\n* providerName\r\n* providerUrl\r\n* cacheAge\r\n* thumbnailUrl\r\n* thumbnailWith\r\n* thumbnailHeight\r\n* html\r\n* width\r\n* height\r\n\r\nThese properties were gathered from the OEmbed and OpenGraph specifications, and merged together in a united interface.\r\nTherefore, based on such standards, these properties are a solid starting point.\r\n\r\nHowever, some providers could also provide some other properties that you want to get.\r\nDon't worry, all these \"non-standard\" properties can also be stored in a Media object.\r\n\r\n```php\r\n<?php\r\n\r\nif ( !$Media->hasCustomProperty( 'foo' )) {\r\n\t$Media->setCustomProperty( 'foo', 'bar' );\r\n}\r\n\r\n$value = $Media->getCustomProperty( 'foo' );\r\n\r\n?>\r\n```\r\n\r\nConfiguration\r\n-------------\r\n\r\nIf you know which providers you will have to query, or simply want to exclude some of them, you can tell Essence which ones you want to use:\r\n\r\n```php\r\n<?php\r\n\r\n$Essence = new fg\\Essence\\Essence(\r\n\tarray(\r\n\t\t'OEmbed/Youtube',\r\n\t\t'OEmbed/Dailymotion',\r\n\t\t'OpenGraph/Ted',\r\n\t\t'YourCustomProvider'\r\n\t)\r\n);\r\n\r\n?>\r\n```\r\n\r\nWhen given an array of providers, the constructor might throw an exception if a provider couldn't be found or loaded.\r\nIf you want to make your code rock solid, you should better wrap that up in a try/catch statement:\r\n\r\n```php\r\n<?php\r\n\r\ntryÂ {\r\n\t$Essence = new fg\\Essence\\Essence( array( ... ));\r\n} catch ( fg\\Essence\\Exception $Exception ) {\r\n\t...\r\n}\r\n\r\n?>\r\n```\r\n\r\nAdvanced usage\r\n--------------\r\n\r\nThe Essence class provides some useful utility function to ensure you will get some informations.\r\n\r\nFirst, the extract( ) method lets you extract embeddable URLs from a web page.\r\nFor example, say you want to get the URL of all videos in a blog post:\r\n\r\n```php\r\n<?php\r\n\r\n$urls = $Essence->extract( 'http://www.blog.com/article' );\r\n\r\n/**\r\n *\t$urls now contains all URLs that can be extracted by Essence:\r\n *\r\n *\tarray(\r\n *\t\t'http://www.youtube.com/watch?v=123456'\r\n *\t\t'http://www.dailymotion.com/video/a1b2c_lolcat-fun'\r\n *\t)\r\n */\r\n\r\n?>\r\n```\r\n\r\nNow that you've got those URLs, there is a good chance you want to embed them:\r\n\r\n```php\r\n<?php\r\n\r\n$medias = $Essence->embedAll( $urls );\r\n\r\n/**\r\n *\t$medias contains an array of Media objects indexed by URL:\r\n *\r\n *\tarray(\r\n *\t\t'http://www.youtube.com/watch?v=123456' => Media( ... )\r\n *\t\t'http://www.dailymotion.com/video/a1b2c_lolcat-fun' => Media( ... )\r\n *\t)\r\n */\r\n\r\n?>\r\n```\r\n\r\nThanks to [Peter Niederlag](https://github.com/t3dev \"t3dev on github\"), it is now possible to pass some options to the providers.\r\n\r\nFor example, OEmbed providers accepts the `maxwidth` and `maxheight` parameters, as specified in the OEmbed spec.\r\nOther providers will just ignore the options they don't handle.\r\n\r\n```php\r\n<?php\r\n\r\n$Media = $Essence->embed(\r\n\t'http://www.youtube.com/watch?v=abcdef',\r\n\tarray(\r\n\t\t'maxwidth' => 800,\r\n\t\t'maxheight' => 600\r\n\t)\r\n);\r\n\r\n$medias = $Essence->embedAll(\r\n\tarray(\r\n\t\t'http://www.youtube.com/watch?v=abcdef',\r\n\t\t'http://www.youtube.com/watch?v=123456'\r\n\t),\r\n\tarray(\r\n\t\t'maxwidth' => 800,\r\n\t\t'maxheight' => 600\r\n\t)\r\n);\r\n\r\n?>\r\n```\r\n\r\nError handling\r\n--------------\r\n\r\nBy default, Essence does all the dirty stuff for you by catching all internal exceptions, so you just have to test if an Media object is valid.\r\nBut, in case you want more informations about an error, Essence keeps exceptions warm, and lets you access all of them:\r\n\r\n```php\r\n<?php\r\n\r\n$Media = $Essence->embed( 'http://www.youtube.com/watch?v=oHg5SJYRHA0' );\r\n\r\nif ( !$Media ) {\r\n\t$Exception = $Essence->lastError( );\r\n\r\n\techo 'That\\'s why you should never trust a camel: ', $Exception->getMessage( );\r\n}\r\n\r\n?>\r\n```\r\n","tagline":"A simple PHP library to extract media informations from websites.","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Essence"}